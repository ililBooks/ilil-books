plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.10"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // spring cloud AWS S3
//    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.0'

    // env
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    // redis & redisson
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.20.0'
    implementation 'org.redisson:redisson:3.23.5'

    // retry
    implementation 'org.springframework.retry:spring-retry'

    // aop
    implementation 'org.springframework:spring-aspects'

    //s3
//    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.0'
    implementation platform('software.amazon.awssdk:bom:2.27.21')
    implementation 'software.amazon.awssdk:s3'

    // Elasticsearch
    implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"
//    implementation 'co.elastic.clients:elasticsearch-java:8.11.0'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

    // webClient 및 webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // health check
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // SMTP
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // iamport(portone)
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register('testCoverage', Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'SOURCEFILE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }
            // 커버리지 체크를 제외할 클래스들
            classDirectories.setFrom(
                    files([
                            fileTree(dir: "$buildDir/classes/java/main",
                                    excludes: [
                                            '**/config/**',
                                            '**/dto/**',
                                            '**/entity/**',
                                            '**/exception/**',
                                            '**/enums/**',
                                            '**/constants/**',
                                            '**/Application*',
                                            '**/*Request*',
                                            '**/*Response*'
                                    ])
                    ])
            )
        }
    }
}

